import {Node, RawNodeRecordProps} from "@proophboard/cody-types";
import {NodeType} from "@proophboard/cody-types/src";
import {makeNodeRecord} from "@proophboard/cody-types/src/NodeRecord";
import shortUUID from "short-uuid";
import {CodyPlayConfig} from "@cody-play/state/config-store";
import {now} from "@cody-engine/cody/hooks/utils/time";

export const makeNodeRecordProophBoardLink = (nodeId: string, config: CodyPlayConfig): string => {
  return `${config.origin}//inspectio/board/${config.boardId}?cells=${nodeId}`
}

export const playMakeNodeRecordWithDefaults = (node: Partial<RawNodeRecordProps>, config: CodyPlayConfig): Node => {
  const nodeId = node.id || shortUUID.generate().toString()

  return makeNodeRecord({
    id: nodeId,
    name: node.name || 'Unnamed',
    description: node.description || 'Generated by CodyGPT at ' + now(),
    type: node.type || NodeType.document,
    metadata: node.metadata || "{}",
    link: node.link || makeNodeRecordProophBoardLink(nodeId, config),
    layer: !!node.layer,
    defaultLayer: !!node.defaultLayer,
    parent: node.parent || null,
    targetsList: node.targetsList || [],
    sourcesList: node.sourcesList || [],
    childrenList: node.childrenList || [],
    tags: node.tags || [],
    geometry: node.geometry || {x:0,y:0}
  })
}
