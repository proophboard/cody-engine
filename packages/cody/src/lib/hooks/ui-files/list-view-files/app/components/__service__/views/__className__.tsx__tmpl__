import {Box, CircularProgress, Typography, useTheme} from "@mui/material";
import {DataGrid, GridColDef} from "@mui/x-data-grid";
import Grid2 from "@mui/material/Grid";
import {useEffect} from "react";
import {merge} from "lodash/fp";
import {get} from "lodash";
import jexl from "@app/shared/jexl/get-configured-jexl";
import {FormJexlContext} from "@frontend/app/components/core/form/types/form-jexl-context";
import {triggerSideBarAnchorsRendered} from "@frontend/util/sidebar/trigger-sidebar-anchors-rendered";
import {usePageData} from "@frontend/hooks/use-page-data";
import {useEnv} from "@frontend/hooks/use-env";
import {useUser} from "@frontend/hooks/use-user";
import {useGlobalStore} from "@frontend/hooks/use-global-store";
import {ViewRuntimeConfig} from "@frontend/app/components/core/views/view-runtime-config";
import {Get<%= className %>} from "@app/shared/queries/<%= serviceNames.fileName %>/get-<%= fileName %>";
import {useGet<%= className %>} from "@frontend/queries/<%= serviceNames.fileName %>/use-get-<%= fileName %>";
import {<%= serviceNames.className %><%= nsClassName %><%= className %>VORuntimeInfo as RuntimeInfo} from "@app/shared/types/<%= serviceNames.fileName %><%= nsFilename %><%= fileName %>";
import NoRowsOverlay from "@frontend/app/components/core/table/NoRowsOverlay";
import TopRightActions from "@frontend/app/components/core/actions/TopRightActions";
import BottomActions from "@frontend/app/components/core/actions/BottomActions";
import StateView from "@frontend/app/components/core/StateView";
import {normalizeUiSchema} from "@frontend/util/schema/normalize-ui-schema";
import {showTitle} from "@frontend/util/schema/show-title";
import {informationTitle} from "@frontend/util/information/titelize";
import {getUiOptions, UiSchema} from "@rjsf/utils";
import {ActionTableColumn, TableUiSchema} from "@cody-engine/cody/hooks/utils/value-object/types";
import {names} from "@event-engine/messaging/helpers";
import {cloneDeepJSON} from "@frontend/util/clone-deep-json";
import {types} from "@app/shared/types";
import {QueryableStateListDescription} from "@event-engine/descriptions/descriptions";
<%- imports %>

const <%= className %> = (params: Get<%= className %> & {hidden?: boolean}, config: ViewRuntimeConfig) => {
  const env = useEnv();
  const theme = useTheme();
  const [user] = useUser();
  const [page,addQueryResult] = usePageData();
  const [store, setStore] = useGlobalStore();
  const normalizedDefaultService = names(env.DEFAULT_SERVICE).className;

  const mergedUiSchema = merge(RuntimeInfo.uiSchema || {}, config.uiSchemaOverride || {});
  // Get items UI schema from original (not normalized) ui schema, so that expr tags can be evaluated in the context of each item
  const itemsUiSchema = get(mergedUiSchema, 'ui:list.items', {});

  // Prepare the main query
  const queryParams = get(mergedUiSchema, 'ui:query', params);
  const jexlQueryCtx = {theme, routeParams: params, user, page, store, data: {}};
  const query = useGet<%= className %>(normalizeUiSchema(queryParams, jexlQueryCtx, env) as Get<%= className %>);

  <%- hooks %>

  const jexlCtx: FormJexlContext = {routeParams: params, user, page, store, data: query.isSuccess ? query.data : {}, mode: config.pageMode === "dialog" ? "dialogView" : "pageView"};

  const uiSchema: UiSchema & TableUiSchema = normalizeUiSchema(mergedUiSchema, jexlCtx, env);
  const uiOptions = getUiOptions(uiSchema);

  // Prepare infos for list view
  const listGridProps = get(uiSchema, 'ui:list.ui:options.container.props', {});
  const itemGridProps = normalizeUiSchema(
    get(cloneDeepJSON(itemsUiSchema), 'ui:options.grid.props', {xs: 12}),
    jexlCtx,
    env
  );
  const itemInfo = types[(RuntimeInfo.desc as QueryableStateListDescription).itemType];

  useEffect(() => {
    triggerSideBarAnchorsRendered();
  }, [params]);

  useEffect(() => {
    addQueryResult('<%= dataReference %>', query);
  }, [query.dataUpdatedAt])

  // Prepare columns for table view
  const columns: GridColDef[] = [
    <%- columns %>
  ];

  if(params.hidden) {
    return <></>
  }

  if(config.viewType === 'list') {
    return (
      <Box component="div">
        <Grid2 container={true}>
          <Grid2 size={'grow'}>
            {showTitle(uiSchema) && (
              <Typography
                variant="h2"
                className="sidebar-anchor"
                id={"component-<%= serviceNames.fileName %>-<%= fileName %>"}
                sx={{ padding: (theme) => theme.spacing(4), paddingLeft: 0 }}
              >
                {informationTitle(RuntimeInfo, uiSchema)}
              </Typography>
            )}
          </Grid2>
          <TopRightActions uiOptions={uiOptions} defaultService={normalizedDefaultService} jexlCtx={jexlCtx} />
        </Grid2>
        {query.isLoading && <CircularProgress />}
        {query.isSuccess && (
          <Grid2 container={true} className="CodyListView-grid" {...listGridProps}>
            {query.data.map((item: any) => <Grid2 key={item['<%= identifier %>']} {...itemGridProps}>
              <StateView
                mode={"listView"}
                description={{...itemInfo, uiSchema: merge(itemInfo.uiSchema || {}, itemsUiSchema) }}
                state={item}
              />
            </Grid2>)}
          </Grid2>
        )}
        <BottomActions uiOptions={uiOptions} defaultService={normalizedDefaultService} jexlCtx={jexlCtx} sx={{marginTop: theme.spacing(2)}} />
      </Box>
    );
  }

  // Return default table view
  return (
    <Box component="div">
      <Grid2 container={true}>
        <Grid2 size={'grow'}>
          {showTitle(uiSchema) && <Typography
            variant="h2"
            className="sidebar-anchor"
            sx={{padding: (theme) => theme.spacing(4), paddingLeft: 0}}
            id={"component-<%= serviceNames.fileName %>-<%= fileName %>"}
          >
            {informationTitle(RuntimeInfo, uiSchema)}
          </Typography>}
        </Grid2>
        <TopRightActions uiOptions={uiOptions} defaultService={normalizedDefaultService} jexlCtx={jexlCtx} />
      </Grid2>
      {query.isLoading && <CircularProgress />}
      {query.isSuccess && <DataGrid
          columns={columns}
          rows={query.data}
          getRowId={row => <% if (identifier) { %>row.<%= identifier %> <% } else { %>JSON.stringify(row) <% } %>}
          sx={{width: "100%"}}
          <% if (!hideToolbar) { %>showToolbar={true}<% } %>
          slots={{
            noRowsOverlay: NoRowsOverlay,
          }}
          initialState={
            {pagination: {paginationModel: {pageSize: <%= pageSizeConfig.pageSize %>}}}
          }
          pageSizeOptions={<%- toJSON(pageSizeConfig.pageSizeOptions) %>}
          density="<%= density %>"
          checkboxSelection={<%- checkboxSelection %>}
          disableRowSelectionExcludeModel
          onRowSelectionModelChange={model => {
            addQueryResult('<%= dataReference %>/Selection', Array.from(model.ids));
          }}
      />}
      <BottomActions uiOptions={uiOptions} defaultService={normalizedDefaultService} jexlCtx={jexlCtx} sx={{marginTop: theme.spacing(2)}} />
    </Box>
  );
}

export default <%= className %>;
