import {CircularProgress} from "@mui/material";
import StateView from "@frontend/app/components/core/StateView";
import FormView from "@frontend/app/components/core/FormView";
import {usePageData} from "@frontend/hooks/use-page-data";
import {useEffect} from "react";
import {useGet<%= className %>} from "@frontend/queries/<%= serviceNames.fileName %>/use-get-<%= fileName %>";
import {<%= serviceNames.className %><%= nsClassName %><%= className %>VORuntimeInfo as RuntimeInfo} from "@app/shared/types/<%= serviceNames.fileName %><%= nsFilename %><%= fileName %>";
import {determineQueryPayload} from "@app/shared/utils/determine-query-payload";
import {<%= serviceNames.className %>Get<%= className %>QueryRuntimeInfo} from "@app/shared/queries/<%= serviceNames.fileName %>/get-<%= fileName %>";
import {ViewRuntimeConfig} from "@frontend/app/components/core/views/view-runtime-config";
import {useUser} from "@frontend/hooks/use-user";
import {useGlobalStore} from "@frontend/hooks/use-global-store";
import {merge} from "lodash/fp";
import jexl from "@app/shared/jexl/get-configured-jexl";
import {getInitialValuesFromUiSchema} from "@frontend/util/command-form/get-initial-values";
import {JSONSchema7} from "json-schema";

type <%= className %>Props = Record<string, string><% if (identifier) { %> & {<%= identifier %>: string}<% } %>;

const <%= className %> = (props: <%= className %>Props & {hidden?: boolean}, config: ViewRuntimeConfig) => {
  const [,addQueryResult] = usePageData();
  const query = useGet<%= className %>(determineQueryPayload(props, <%= serviceNames.className %>Get<%= className %>QueryRuntimeInfo), !config.loadState);
  const [page] = usePageData();
  const [user] = useUser();
  const [store] = useGlobalStore();

  const jexlCtx = {routeParams: props, user, page, store};

  let isHidden = config.isHiddenView;

  const uiSchema = merge({...RuntimeInfo.uiSchema} || {}, config.uiSchemaOverride || {});

  if(!isHidden && typeof uiSchema['ui:hidden'] !== "undefined") {
    if(typeof uiSchema['ui:hidden'] === "string") {
      isHidden = jexl.evalSync(uiSchema['ui:hidden'], jexlCtx);
      delete uiSchema['ui:hidden'];
    } else {
      isHidden = uiSchema['ui:hidden'];
    }
  }

  useEffect(() => {
    addQueryResult(`<%= dataReference %>${config.viewType === 'form' ? '/Form' : '' }`, query);
  }, [query.dataUpdatedAt]);

  const initialValues = config.injectedInitialValues || getInitialValuesFromUiSchema(uiSchema, RuntimeInfo.schema as unknown as JSONSchema7, jexlCtx);
  const state = query.isSuccess ? merge(initialValues, query.data) : initialValues;

  if(isHidden) {
    return <></>
  }

  if(query.isLoading) {
    return <CircularProgress />;
  }

  if(config.viewType === "form") {
    return <>
      {query.isSuccess && <FormView
        pageMode={config.pageMode}
        description={{...RuntimeInfo, uiSchema}}
        state={state}
        onSubmitted={() => config.loadState ? query.refetch() : undefined }
      />}
    </>
  } else {
    return <>
      {query.isSuccess && <StateView
        mode={config.pageMode === "dialog" ? "dialogView" : "pageView"}
        description={{...RuntimeInfo, uiSchema}}
        state={state}
      />}
    </>
  }
}

export default <%= className %>;
